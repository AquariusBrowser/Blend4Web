.. _logic_editor:

***************************
Визуальное программирование
***************************

Визуальное программирование (Logic Editor)
==========================================

Осуществляется путем создания нодового дерева логики в окне нодового 
редактора. С помощью ``Logic Editor`` можно существенно расширить функциональность 
сцены, не прибегая при этом к программированию.

.. image:: src_images/logic_editor/logic_editor_app_example.jpg
   :align: center
   :width: 100%

Для активации логики, на вкладке настроек сцены 
Blender необходимо установить галочку ``Logic Editor`` и добавить/выбрать
активное нодовое дерево:

.. image:: src_images/logic_editor/logic_editor_activation.png
   :align: center
   :width: 100%

Для редактирования дерева логики необходимо перейти в ``Редактор Нод`` 
(Node Editor) выбрать тип нодового дерева ``Blend4Web logic``:

.. image:: src_images/logic_editor/logic_editor_tree_type.png
   :align: center
   :width: 100%

Затем выбрать дерево для редактирования:

.. image:: src_images/logic_editor/logic_editor_select_tree.png
   :align: center
   :width: 100%

   
|

Создание нод осуществляется привычным для Blender сочетанием клавиш
``Shift+A``.

Ноды  - это логические блоки, выполнение которых начинается с
``Entry Point``, которая имеет один единственный выход. Почти все остальные 
ноды помимо одного или двух выходов имеют также входы, таким образом они
могут быть вставлены в любое место в дереве. Ноды без выходов, например 
``Page Redirect``, могут быть вставлены только в конец какой-либо ветви.
Ноды с двумя выходами позволяют ветвить алгоритм в зависимости от
успеха/провала указанного условия, например ``Conditional Jump``.

Для реализации сложной логики предусмотрены числовые переменные, называемые
регистрами. Каждый из 8 регистров может хранить в себе одно числовое значение.
Регистры могут быть использованы для хранения какого-либо состояния сцены
(например, это может быть счётчик проигрываемых анимаций, количество жизней,
оставшихся у персонажа и т.д.).

Пример использования Logic Editor:

.. image:: src_images/logic_editor/logic_editor_example.png
   :align: center
   :width: 100%

|
   
Ниже рассмотрены все возможные варианты нод.

Play
----

Проигрывать участок NLA, начиная с кадра, на который указывает маркер.
Анимация воспроизводится до следующего маркера, либо до конца шкалы времени
сцены, после чего управление переходит к следующей ноде.

.. image:: src_images/logic_editor/logic_editor_anim.png
   :align: center
   :width: 100%
   

.. _nla_select_play:


Select & Play
-------------

Ожидать, когда пользователь выберет объект (с помощью клика мышью в версии
движка для десктопа, либо нажатия на экране в мобильной версии). Если выбран
объект, указанный в параметрах ноды, начать играть анимацию аналогично ноде
``Play``, если же был выбран любой другой объект - немедленно передать управление
следующей ноде.

Select & Jump
-------------

Аналогично ноде ``Select & Play``, за исключением того, что вместо анимации
осуществляется переход. Указанная функция позволяет реализовать более сложную
логику, поскольку появляется возможность распознавания результата выбора
пользователя.

Conditional Jump
----------------

Перейти к указанной ноде в случае выполнения выбранного условия. В качестве
параметров условия (операндов) могут выступать также регистры, которые
активируются с помощью соответствующих переключателей.

Register Store
--------------

Записать числовое значение в регистр.

Math Operation
--------------

Выполнить математическую операцию и сохранить результат в регистр. Любой из
параметров (операндов) может быть либо числовым значением, либо регистром.

Show Object и Hide Object
-------------------------

Используются для скрытия и отображения объектов.

Page Redirect
-------------

Служит для перенаправления на другие веб-страницы.

Page Param
----------

Позволяет сохранить произвольный параметр веб-страницы в выбранном числовом регистре.

Отладка
-------

Для отладки имеется возможность отключения (muting) нод. Для этого необходимо
выделить ноду и нажать горячую клавишу ``M``. Отключенная нода не выполняется,
но при этом передает управление следующей ноде. Если у отключенной ноды имеется
несколько выходов, то будет происходить выполнение ветки со стороны выхода отрицательного
результата (``Miss``, ``False``).
